<?php
/**
 * MeterPlantDetails
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SunData API
 *
 * SunData API OpenAPI Specification.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: admin@sundata.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SunDataMetropolisClient\Model;

use \ArrayAccess;
use \SunDataMetropolisClient\ObjectSerializer;

/**
 * MeterPlantDetails Class Doc Comment
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MeterPlantDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MeterPlantDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'amount_in_cents_per_kwh' => 'int',
        'name' => 'string',
        'operational_since' => '\DateTime',
        'p90' => 'int',
        'peak_in_watt' => 'int',
        'reference_identifier' => 'string',
        'plant' => '\SunDataMetropolisClient\Model\MeterPlantDetailsPlant',
        'performances' => '\SunDataMetropolisClient\Model\MeterPerformance[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'amount_in_cents_per_kwh' => null,
        'name' => null,
        'operational_since' => 'date-time',
        'p90' => null,
        'peak_in_watt' => null,
        'reference_identifier' => null,
        'plant' => null,
        'performances' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'amount_in_cents_per_kwh' => 'amount_in_cents_per_kwh',
        'name' => 'name',
        'operational_since' => 'operational_since',
        'p90' => 'p90',
        'peak_in_watt' => 'peak_in_watt',
        'reference_identifier' => 'reference_identifier',
        'plant' => 'plant',
        'performances' => 'performances'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'amount_in_cents_per_kwh' => 'setAmountInCentsPerKwh',
        'name' => 'setName',
        'operational_since' => 'setOperationalSince',
        'p90' => 'setP90',
        'peak_in_watt' => 'setPeakInWatt',
        'reference_identifier' => 'setReferenceIdentifier',
        'plant' => 'setPlant',
        'performances' => 'setPerformances'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'amount_in_cents_per_kwh' => 'getAmountInCentsPerKwh',
        'name' => 'getName',
        'operational_since' => 'getOperationalSince',
        'p90' => 'getP90',
        'peak_in_watt' => 'getPeakInWatt',
        'reference_identifier' => 'getReferenceIdentifier',
        'plant' => 'getPlant',
        'performances' => 'getPerformances'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['amount_in_cents_per_kwh'] = $data['amount_in_cents_per_kwh'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['operational_since'] = $data['operational_since'] ?? null;
        $this->container['p90'] = $data['p90'] ?? null;
        $this->container['peak_in_watt'] = $data['peak_in_watt'] ?? null;
        $this->container['reference_identifier'] = $data['reference_identifier'] ?? null;
        $this->container['plant'] = $data['plant'] ?? null;
        $this->container['performances'] = $data['performances'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets amount_in_cents_per_kwh
     *
     * @return int|null
     */
    public function getAmountInCentsPerKwh()
    {
        return $this->container['amount_in_cents_per_kwh'];
    }

    /**
     * Sets amount_in_cents_per_kwh
     *
     * @param int|null $amount_in_cents_per_kwh amount_in_cents_per_kwh
     *
     * @return self
     */
    public function setAmountInCentsPerKwh($amount_in_cents_per_kwh)
    {
        $this->container['amount_in_cents_per_kwh'] = $amount_in_cents_per_kwh;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operational_since
     *
     * @return \DateTime|null
     */
    public function getOperationalSince()
    {
        return $this->container['operational_since'];
    }

    /**
     * Sets operational_since
     *
     * @param \DateTime|null $operational_since operational_since
     *
     * @return self
     */
    public function setOperationalSince($operational_since)
    {
        $this->container['operational_since'] = $operational_since;

        return $this;
    }

    /**
     * Gets p90
     *
     * @return int|null
     */
    public function getP90()
    {
        return $this->container['p90'];
    }

    /**
     * Sets p90
     *
     * @param int|null $p90 p90
     *
     * @return self
     */
    public function setP90($p90)
    {
        $this->container['p90'] = $p90;

        return $this;
    }

    /**
     * Gets peak_in_watt
     *
     * @return int|null
     */
    public function getPeakInWatt()
    {
        return $this->container['peak_in_watt'];
    }

    /**
     * Sets peak_in_watt
     *
     * @param int|null $peak_in_watt peak_in_watt
     *
     * @return self
     */
    public function setPeakInWatt($peak_in_watt)
    {
        $this->container['peak_in_watt'] = $peak_in_watt;

        return $this;
    }

    /**
     * Gets reference_identifier
     *
     * @return string|null
     */
    public function getReferenceIdentifier()
    {
        return $this->container['reference_identifier'];
    }

    /**
     * Sets reference_identifier
     *
     * @param string|null $reference_identifier reference_identifier
     *
     * @return self
     */
    public function setReferenceIdentifier($reference_identifier)
    {
        $this->container['reference_identifier'] = $reference_identifier;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return \SunDataMetropolisClient\Model\MeterPlantDetailsPlant|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param \SunDataMetropolisClient\Model\MeterPlantDetailsPlant|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets performances
     *
     * @return \SunDataMetropolisClient\Model\MeterPerformance[]|null
     */
    public function getPerformances()
    {
        return $this->container['performances'];
    }

    /**
     * Sets performances
     *
     * @param \SunDataMetropolisClient\Model\MeterPerformance[]|null $performances performances
     *
     * @return self
     */
    public function setPerformances($performances)
    {
        $this->container['performances'] = $performances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


