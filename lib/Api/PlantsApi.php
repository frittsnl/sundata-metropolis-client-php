<?php
/**
 * PlantsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SunData API
 *
 * ### Requirements * an account with the credentials;   * e-mail address   * password ### Getting Started 1. Use the Sign-In endpoint to obtain a bearer token.   * open the 'authorize' of the swagger and paste the bearer-token here   * note: the authorization is persisted in the swagger but eventually the token will expire 2. Use the user/me/companies endpoint to find out which company_ids are associated with the account 3. Validate by using, for example, the Companies endpoint (GET)   * fill the company-id ### Upgrade guide * v1.6.0   * Adds the plant-tags endpoints, for attaching and detaching tags * v2.0.0   * Attaching tags and companies during plant creation or updating is no longer supported.     These should now be attached using the plant-tags and plant-companies endpoints.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: admin@sundata.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SunDataMetropolisClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SunDataMetropolisClient\ApiException;
use SunDataMetropolisClient\Configuration;
use SunDataMetropolisClient\HeaderSelector;
use SunDataMetropolisClient\ObjectSerializer;

/**
 * PlantsApi Class Doc Comment
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlantsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'attachChildCompany' => [
            'application/json',
        ],
        'attachTag' => [
            'application/json',
        ],
        'createPlant' => [
            'application/json',
        ],
        'detachChildCompany' => [
            'application/json',
        ],
        'detachTag' => [
            'application/json',
        ],
        'getPlantById' => [
            'application/json',
        ],
        'getPlantCompanies' => [
            'application/json',
        ],
        'getPlantTags' => [
            'application/json',
        ],
        'getPlants' => [
            'application/json',
        ],
        'updatePlant' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation attachChildCompany
     *
     * Attach a child company to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachChildCompany'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function attachChildCompany($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['attachChildCompany'][0])
    {
        list($response) = $this->attachChildCompanyWithHttpInfo($company_id, $plant_id, $child_company_id, $contentType);
        return $response;
    }

    /**
     * Operation attachChildCompanyWithHttpInfo
     *
     * Attach a child company to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachChildCompany'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function attachChildCompanyWithHttpInfo($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['attachChildCompany'][0])
    {
        $request = $this->attachChildCompanyRequest($company_id, $plant_id, $child_company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attachChildCompanyAsync
     *
     * Attach a child company to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachChildCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachChildCompanyAsync($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['attachChildCompany'][0])
    {
        return $this->attachChildCompanyAsyncWithHttpInfo($company_id, $plant_id, $child_company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachChildCompanyAsyncWithHttpInfo
     *
     * Attach a child company to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachChildCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachChildCompanyAsyncWithHttpInfo($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['attachChildCompany'][0])
    {
        $returnType = 'string[]';
        $request = $this->attachChildCompanyRequest($company_id, $plant_id, $child_company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachChildCompany'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachChildCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachChildCompanyRequest($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['attachChildCompany'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling attachChildCompany'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling attachChildCompany'
            );
        }

        // verify the required parameter 'child_company_id' is set
        if ($child_company_id === null || (is_array($child_company_id) && count($child_company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $child_company_id when calling attachChildCompany'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/companies/{child_company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }
        // path params
        if ($child_company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'child_company_id' . '}',
                ObjectSerializer::toPathValue($child_company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attachTag
     *
     * Attach a tag to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTag'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function attachTag($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['attachTag'][0])
    {
        list($response) = $this->attachTagWithHttpInfo($company_id, $plant_id, $tag_id, $contentType);
        return $response;
    }

    /**
     * Operation attachTagWithHttpInfo
     *
     * Attach a tag to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTag'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function attachTagWithHttpInfo($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['attachTag'][0])
    {
        $request = $this->attachTagRequest($company_id, $plant_id, $tag_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation attachTagAsync
     *
     * Attach a tag to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachTagAsync($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['attachTag'][0])
    {
        return $this->attachTagAsyncWithHttpInfo($company_id, $plant_id, $tag_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachTagAsyncWithHttpInfo
     *
     * Attach a tag to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachTagAsyncWithHttpInfo($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['attachTag'][0])
    {
        $returnType = 'string[]';
        $request = $this->attachTagRequest($company_id, $plant_id, $tag_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachTag'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachTagRequest($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['attachTag'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling attachTag'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling attachTag'
            );
        }

        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling attachTag'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/tags/{tag_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tag_id' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPlant
     *
     * Create Plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlant'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\PlantCreateResponse
     */
    public function createPlant($company_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['createPlant'][0])
    {
        list($response) = $this->createPlantWithHttpInfo($company_id, $with, $plant_payload, $contentType);
        return $response;
    }

    /**
     * Operation createPlantWithHttpInfo
     *
     * Create Plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlant'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\PlantCreateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPlantWithHttpInfo($company_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['createPlant'][0])
    {
        $request = $this->createPlantRequest($company_id, $with, $plant_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\PlantCreateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\PlantCreateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\PlantCreateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\PlantCreateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\PlantCreateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPlantAsync
     *
     * Create Plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlantAsync($company_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['createPlant'][0])
    {
        return $this->createPlantAsyncWithHttpInfo($company_id, $with, $plant_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPlantAsyncWithHttpInfo
     *
     * Create Plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlantAsyncWithHttpInfo($company_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['createPlant'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\PlantCreateResponse';
        $request = $this->createPlantRequest($company_id, $with, $plant_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPlant'
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPlantRequest($company_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['createPlant'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling createPlant'
            );
        }




        $resourcePath = '/companies/{company_id}/plants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($plant_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($plant_payload));
            } else {
                $httpBody = $plant_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation detachChildCompany
     *
     * Detach a child company from the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachChildCompany'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function detachChildCompany($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['detachChildCompany'][0])
    {
        list($response) = $this->detachChildCompanyWithHttpInfo($company_id, $plant_id, $child_company_id, $contentType);
        return $response;
    }

    /**
     * Operation detachChildCompanyWithHttpInfo
     *
     * Detach a child company from the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachChildCompany'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function detachChildCompanyWithHttpInfo($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['detachChildCompany'][0])
    {
        $request = $this->detachChildCompanyRequest($company_id, $plant_id, $child_company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation detachChildCompanyAsync
     *
     * Detach a child company from the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachChildCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detachChildCompanyAsync($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['detachChildCompany'][0])
    {
        return $this->detachChildCompanyAsyncWithHttpInfo($company_id, $plant_id, $child_company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation detachChildCompanyAsyncWithHttpInfo
     *
     * Detach a child company from the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachChildCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detachChildCompanyAsyncWithHttpInfo($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['detachChildCompany'][0])
    {
        $returnType = 'string[]';
        $request = $this->detachChildCompanyRequest($company_id, $plant_id, $child_company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'detachChildCompany'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $child_company_id The id of the child company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachChildCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function detachChildCompanyRequest($company_id, $plant_id, $child_company_id, string $contentType = self::contentTypes['detachChildCompany'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling detachChildCompany'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling detachChildCompany'
            );
        }

        // verify the required parameter 'child_company_id' is set
        if ($child_company_id === null || (is_array($child_company_id) && count($child_company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $child_company_id when calling detachChildCompany'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/companies/{child_company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }
        // path params
        if ($child_company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'child_company_id' . '}',
                ObjectSerializer::toPathValue($child_company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation detachTag
     *
     * Detach a tag from the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachTag'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function detachTag($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['detachTag'][0])
    {
        list($response) = $this->detachTagWithHttpInfo($company_id, $plant_id, $tag_id, $contentType);
        return $response;
    }

    /**
     * Operation detachTagWithHttpInfo
     *
     * Detach a tag from the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachTag'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function detachTagWithHttpInfo($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['detachTag'][0])
    {
        $request = $this->detachTagRequest($company_id, $plant_id, $tag_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation detachTagAsync
     *
     * Detach a tag from the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detachTagAsync($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['detachTag'][0])
    {
        return $this->detachTagAsyncWithHttpInfo($company_id, $plant_id, $tag_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation detachTagAsyncWithHttpInfo
     *
     * Detach a tag from the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function detachTagAsyncWithHttpInfo($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['detachTag'][0])
    {
        $returnType = 'string[]';
        $request = $this->detachTagRequest($company_id, $plant_id, $tag_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'detachTag'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $tag_id The id of the tag (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['detachTag'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function detachTagRequest($company_id, $plant_id, $tag_id, string $contentType = self::contentTypes['detachTag'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling detachTag'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling detachTag'
            );
        }

        // verify the required parameter 'tag_id' is set
        if ($tag_id === null || (is_array($tag_id) && count($tag_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tag_id when calling detachTag'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/tags/{tag_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }
        // path params
        if ($tag_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tag_id' . '}',
                ObjectSerializer::toPathValue($tag_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlantById
     *
     * Plant details
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantById'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\GetPlantResponse
     */
    public function getPlantById($company_id, $plant_id, $with = null, string $contentType = self::contentTypes['getPlantById'][0])
    {
        list($response) = $this->getPlantByIdWithHttpInfo($company_id, $plant_id, $with, $contentType);
        return $response;
    }

    /**
     * Operation getPlantByIdWithHttpInfo
     *
     * Plant details
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantById'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\GetPlantResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlantByIdWithHttpInfo($company_id, $plant_id, $with = null, string $contentType = self::contentTypes['getPlantById'][0])
    {
        $request = $this->getPlantByIdRequest($company_id, $plant_id, $with, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\GetPlantResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\GetPlantResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\GetPlantResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\GetPlantResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\GetPlantResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlantByIdAsync
     *
     * Plant details
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantByIdAsync($company_id, $plant_id, $with = null, string $contentType = self::contentTypes['getPlantById'][0])
    {
        return $this->getPlantByIdAsyncWithHttpInfo($company_id, $plant_id, $with, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlantByIdAsyncWithHttpInfo
     *
     * Plant details
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantByIdAsyncWithHttpInfo($company_id, $plant_id, $with = null, string $contentType = self::contentTypes['getPlantById'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\GetPlantResponse';
        $request = $this->getPlantByIdRequest($company_id, $plant_id, $with, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlantById'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlantByIdRequest($company_id, $plant_id, $with = null, string $contentType = self::contentTypes['getPlantById'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPlantById'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling getPlantById'
            );
        }



        $resourcePath = '/companies/{company_id}/plants/{plant_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlantCompanies
     *
     * Get all companies attached to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCompanies'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\Company[]
     */
    public function getPlantCompanies($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCompanies'][0])
    {
        list($response) = $this->getPlantCompaniesWithHttpInfo($company_id, $plant_id, $contentType);
        return $response;
    }

    /**
     * Operation getPlantCompaniesWithHttpInfo
     *
     * Get all companies attached to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCompanies'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\Company[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlantCompaniesWithHttpInfo($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCompanies'][0])
    {
        $request = $this->getPlantCompaniesRequest($company_id, $plant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\Company[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\Company[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\Company[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\Company[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\Company[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlantCompaniesAsync
     *
     * Get all companies attached to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantCompaniesAsync($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCompanies'][0])
    {
        return $this->getPlantCompaniesAsyncWithHttpInfo($company_id, $plant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlantCompaniesAsyncWithHttpInfo
     *
     * Get all companies attached to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantCompaniesAsyncWithHttpInfo($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCompanies'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\Company[]';
        $request = $this->getPlantCompaniesRequest($company_id, $plant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlantCompanies'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlantCompaniesRequest($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCompanies'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPlantCompanies'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling getPlantCompanies'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlantTags
     *
     * Get all tags attached to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantTags'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\Tag[]
     */
    public function getPlantTags($company_id, $plant_id, string $contentType = self::contentTypes['getPlantTags'][0])
    {
        list($response) = $this->getPlantTagsWithHttpInfo($company_id, $plant_id, $contentType);
        return $response;
    }

    /**
     * Operation getPlantTagsWithHttpInfo
     *
     * Get all tags attached to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantTags'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlantTagsWithHttpInfo($company_id, $plant_id, string $contentType = self::contentTypes['getPlantTags'][0])
    {
        $request = $this->getPlantTagsRequest($company_id, $plant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\Tag[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\Tag[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\Tag[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\Tag[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlantTagsAsync
     *
     * Get all tags attached to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantTagsAsync($company_id, $plant_id, string $contentType = self::contentTypes['getPlantTags'][0])
    {
        return $this->getPlantTagsAsyncWithHttpInfo($company_id, $plant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlantTagsAsyncWithHttpInfo
     *
     * Get all tags attached to the plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantTagsAsyncWithHttpInfo($company_id, $plant_id, string $contentType = self::contentTypes['getPlantTags'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\Tag[]';
        $request = $this->getPlantTagsRequest($company_id, $plant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlantTags'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlantTagsRequest($company_id, $plant_id, string $contentType = self::contentTypes['getPlantTags'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPlantTags'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling getPlantTags'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlants
     *
     * Plants
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $query query (optional)
     * @param  string $street street (optional)
     * @param  string $postal_code postal_code (optional)
     * @param  string $city city (optional)
     * @param  string $reference_identifier reference_identifier (optional)
     * @param  int $page Page of the search results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlants'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\GetPaginatedPlantsResponse
     */
    public function getPlants($company_id, $with = null, $query = null, $street = null, $postal_code = null, $city = null, $reference_identifier = null, $page = null, string $contentType = self::contentTypes['getPlants'][0])
    {
        list($response) = $this->getPlantsWithHttpInfo($company_id, $with, $query, $street, $postal_code, $city, $reference_identifier, $page, $contentType);
        return $response;
    }

    /**
     * Operation getPlantsWithHttpInfo
     *
     * Plants
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $query (optional)
     * @param  string $street (optional)
     * @param  string $postal_code (optional)
     * @param  string $city (optional)
     * @param  string $reference_identifier (optional)
     * @param  int $page Page of the search results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlants'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\GetPaginatedPlantsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlantsWithHttpInfo($company_id, $with = null, $query = null, $street = null, $postal_code = null, $city = null, $reference_identifier = null, $page = null, string $contentType = self::contentTypes['getPlants'][0])
    {
        $request = $this->getPlantsRequest($company_id, $with, $query, $street, $postal_code, $city, $reference_identifier, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\GetPaginatedPlantsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\GetPaginatedPlantsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\GetPaginatedPlantsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\GetPaginatedPlantsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\GetPaginatedPlantsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlantsAsync
     *
     * Plants
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $query (optional)
     * @param  string $street (optional)
     * @param  string $postal_code (optional)
     * @param  string $city (optional)
     * @param  string $reference_identifier (optional)
     * @param  int $page Page of the search results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlants'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantsAsync($company_id, $with = null, $query = null, $street = null, $postal_code = null, $city = null, $reference_identifier = null, $page = null, string $contentType = self::contentTypes['getPlants'][0])
    {
        return $this->getPlantsAsyncWithHttpInfo($company_id, $with, $query, $street, $postal_code, $city, $reference_identifier, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlantsAsyncWithHttpInfo
     *
     * Plants
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $query (optional)
     * @param  string $street (optional)
     * @param  string $postal_code (optional)
     * @param  string $city (optional)
     * @param  string $reference_identifier (optional)
     * @param  int $page Page of the search results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlants'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantsAsyncWithHttpInfo($company_id, $with = null, $query = null, $street = null, $postal_code = null, $city = null, $reference_identifier = null, $page = null, string $contentType = self::contentTypes['getPlants'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\GetPaginatedPlantsResponse';
        $request = $this->getPlantsRequest($company_id, $with, $query, $street, $postal_code, $city, $reference_identifier, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlants'
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  string $query (optional)
     * @param  string $street (optional)
     * @param  string $postal_code (optional)
     * @param  string $city (optional)
     * @param  string $reference_identifier (optional)
     * @param  int $page Page of the search results (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlants'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlantsRequest($company_id, $with = null, $query = null, $street = null, $postal_code = null, $city = null, $reference_identifier = null, $page = null, string $contentType = self::contentTypes['getPlants'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPlants'
            );
        }









        $resourcePath = '/companies/{company_id}/plants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $street,
            'street', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $postal_code,
            'postal_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $city,
            'city', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_identifier,
            'reference_identifier', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePlant
     *
     * Update Plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlant'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\PlantUpdateResponse
     */
    public function updatePlant($company_id, $plant_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['updatePlant'][0])
    {
        list($response) = $this->updatePlantWithHttpInfo($company_id, $plant_id, $with, $plant_payload, $contentType);
        return $response;
    }

    /**
     * Operation updatePlantWithHttpInfo
     *
     * Update Plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlant'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\PlantUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePlantWithHttpInfo($company_id, $plant_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['updatePlant'][0])
    {
        $request = $this->updatePlantRequest($company_id, $plant_id, $with, $plant_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\PlantUpdateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\PlantUpdateResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\PlantUpdateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\PlantUpdateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\PlantUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePlantAsync
     *
     * Update Plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlantAsync($company_id, $plant_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['updatePlant'][0])
    {
        return $this->updatePlantAsyncWithHttpInfo($company_id, $plant_id, $with, $plant_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePlantAsyncWithHttpInfo
     *
     * Update Plant
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlantAsyncWithHttpInfo($company_id, $plant_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['updatePlant'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\PlantUpdateResponse';
        $request = $this->updatePlantRequest($company_id, $plant_id, $with, $plant_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePlant'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;tags&#x60;, &#x60;custom_fields&#x60;, &#x60;companies&#x60;, &#x60;meters&#x60;, &#x60;notes&#x60; (optional)
     * @param  \SunDataMetropolisClient\Model\PlantPayload $plant_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlant'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePlantRequest($company_id, $plant_id, $with = null, $plant_payload = null, string $contentType = self::contentTypes['updatePlant'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling updatePlant'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling updatePlant'
            );
        }




        $resourcePath = '/companies/{company_id}/plants/{plant_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($plant_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($plant_payload));
            } else {
                $httpBody = $plant_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
