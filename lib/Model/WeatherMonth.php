<?php
/**
 * WeatherMonth
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SunData API
 *
 * SunData API OpenAPI Specification.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: admin@sundata.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SunDataMetropolisClient\Model;

use \ArrayAccess;
use \SunDataMetropolisClient\ObjectSerializer;

/**
 * WeatherMonth Class Doc Comment
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class WeatherMonth implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WeatherMonth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_q' => 'float',
        'avg_ug' => 'float',
        'max_vvx' => 'int',
        'max_tx' => 'int',
        'avg_ng' => 'int',
        'total_rh' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'total_q' => null,
        'avg_ug' => null,
        'max_vvx' => null,
        'max_tx' => null,
        'avg_ng' => null,
        'total_rh' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_q' => 'total_Q',
        'avg_ug' => 'avg_UG',
        'max_vvx' => 'max_VVX',
        'max_tx' => 'max_TX',
        'avg_ng' => 'avg_NG',
        'total_rh' => 'total_RH'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_q' => 'setTotalQ',
        'avg_ug' => 'setAvgUg',
        'max_vvx' => 'setMaxVvx',
        'max_tx' => 'setMaxTx',
        'avg_ng' => 'setAvgNg',
        'total_rh' => 'setTotalRh'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_q' => 'getTotalQ',
        'avg_ug' => 'getAvgUg',
        'max_vvx' => 'getMaxVvx',
        'max_tx' => 'getMaxTx',
        'avg_ng' => 'getAvgNg',
        'total_rh' => 'getTotalRh'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_q'] = $data['total_q'] ?? null;
        $this->container['avg_ug'] = $data['avg_ug'] ?? null;
        $this->container['max_vvx'] = $data['max_vvx'] ?? null;
        $this->container['max_tx'] = $data['max_tx'] ?? null;
        $this->container['avg_ng'] = $data['avg_ng'] ?? null;
        $this->container['total_rh'] = $data['total_rh'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_q
     *
     * @return float|null
     */
    public function getTotalQ()
    {
        return $this->container['total_q'];
    }

    /**
     * Sets total_q
     *
     * @param float|null $total_q total_q
     *
     * @return self
     */
    public function setTotalQ($total_q)
    {
        $this->container['total_q'] = $total_q;

        return $this;
    }

    /**
     * Gets avg_ug
     *
     * @return float|null
     */
    public function getAvgUg()
    {
        return $this->container['avg_ug'];
    }

    /**
     * Sets avg_ug
     *
     * @param float|null $avg_ug avg_ug
     *
     * @return self
     */
    public function setAvgUg($avg_ug)
    {
        $this->container['avg_ug'] = $avg_ug;

        return $this;
    }

    /**
     * Gets max_vvx
     *
     * @return int|null
     */
    public function getMaxVvx()
    {
        return $this->container['max_vvx'];
    }

    /**
     * Sets max_vvx
     *
     * @param int|null $max_vvx max_vvx
     *
     * @return self
     */
    public function setMaxVvx($max_vvx)
    {
        $this->container['max_vvx'] = $max_vvx;

        return $this;
    }

    /**
     * Gets max_tx
     *
     * @return int|null
     */
    public function getMaxTx()
    {
        return $this->container['max_tx'];
    }

    /**
     * Sets max_tx
     *
     * @param int|null $max_tx max_tx
     *
     * @return self
     */
    public function setMaxTx($max_tx)
    {
        $this->container['max_tx'] = $max_tx;

        return $this;
    }

    /**
     * Gets avg_ng
     *
     * @return int|null
     */
    public function getAvgNg()
    {
        return $this->container['avg_ng'];
    }

    /**
     * Sets avg_ng
     *
     * @param int|null $avg_ng avg_ng
     *
     * @return self
     */
    public function setAvgNg($avg_ng)
    {
        $this->container['avg_ng'] = $avg_ng;

        return $this;
    }

    /**
     * Gets total_rh
     *
     * @return int|null
     */
    public function getTotalRh()
    {
        return $this->container['total_rh'];
    }

    /**
     * Sets total_rh
     *
     * @param int|null $total_rh total_rh
     *
     * @return self
     */
    public function setTotalRh($total_rh)
    {
        $this->container['total_rh'] = $total_rh;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


