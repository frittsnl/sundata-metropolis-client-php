<?php
/**
 * PlantsApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SunData API
 *
 * ### Requirements * an account with the credentials;   * e-mail address   * password ### Getting Started 1. Use the Sign-In endpoint to obtain a bearer token.   * open the 'authorize' of the swagger and paste the bearer-token here   * note: the authorization is persisted in the swagger but eventually the token will expire 2. Use the user/me/companies endpoint to find out which company_ids are associated with the account 3. Validate by using, for example, the Companies endpoint (GET)   * fill the company-id ### Upgrade guide * v1.6.0   * Adds the plant-tags endpoints, for attaching and detaching tags * v2.0.0 (Coming soon)   * Deprecates the use of attaching tags and companies during creation and updating of a plant.     This should be done using the plant-tags and plant-companies endpoints.
 *
 * The version of the OpenAPI document: 1.6.0
 * Contact: admin@sundata.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace SunDataMetropolisClient\Test\Api;

use \SunDataMetropolisClient\Configuration;
use \SunDataMetropolisClient\ApiException;
use \SunDataMetropolisClient\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PlantsApiTest Class Doc Comment
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PlantsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for attachChildCompany
     *
     * Attach a child company to the plant.
     *
     */
    public function testAttachChildCompany()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for attachTag
     *
     * Attach a tag to the plant.
     *
     */
    public function testAttachTag()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createPlant
     *
     * Create Plant.
     *
     */
    public function testCreatePlant()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for detachChildCompany
     *
     * Detach a child company from the plant.
     *
     */
    public function testDetachChildCompany()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for detachTag
     *
     * Detach a tag from the plant.
     *
     */
    public function testDetachTag()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPlantById
     *
     * Plant details.
     *
     */
    public function testGetPlantById()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPlantCompanies
     *
     * Get all companies attached to the plant.
     *
     */
    public function testGetPlantCompanies()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPlantTags
     *
     * Get all tags attached to the plant.
     *
     */
    public function testGetPlantTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPlants
     *
     * Plants.
     *
     */
    public function testGetPlants()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePlant
     *
     * Update Plant.
     *
     */
    public function testUpdatePlant()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
