<?php
/**
 * CreateMeterPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SunData API
 *
 * ### Requirements * an account with the credentials;   * e-mail address   * password ### Getting Started 1. Use the Sign-In endpoint to obtain a bearer token.   * open the 'authorize' of the swagger and paste the bearer-token here   * note: the authorization is persisted in the swagger but eventually the token will expire 2. Use the user/me/companies endpoint to find out which company_ids are associated with the account 3. Validate by using, for example, the Companies endpoint (GET)   * fill the company-id ### Upgrade guide * v1.6.0   * Adds the plant-tags endpoints, for attaching and detaching tags * v2.0.0   * Attaching tags and companies during plant creation or updating is no longer supported.     These should now be attached using the plant-tags and plant-companies endpoints.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: admin@sundata.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SunDataMetropolisClient\Model;

use \ArrayAccess;
use \SunDataMetropolisClient\ObjectSerializer;

/**
 * CreateMeterPayload Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateMeterPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateMeterPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'inbound_driver' => 'string',
        'reference_identifier' => 'string',
        'amount_in_cents_per_kwh' => 'float',
        'peak_in_watt' => 'float',
        'p90_in_kwh' => 'float',
        'orientation_in_degrees' => 'float',
        'angle_in_degrees' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'inbound_driver' => null,
        'reference_identifier' => null,
        'amount_in_cents_per_kwh' => null,
        'peak_in_watt' => null,
        'p90_in_kwh' => null,
        'orientation_in_degrees' => null,
        'angle_in_degrees' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'inbound_driver' => false,
		'reference_identifier' => false,
		'amount_in_cents_per_kwh' => true,
		'peak_in_watt' => true,
		'p90_in_kwh' => true,
		'orientation_in_degrees' => true,
		'angle_in_degrees' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inbound_driver' => 'inbound_driver',
        'reference_identifier' => 'reference_identifier',
        'amount_in_cents_per_kwh' => 'amount_in_cents_per_kwh',
        'peak_in_watt' => 'peak_in_watt',
        'p90_in_kwh' => 'p90_in_kwh',
        'orientation_in_degrees' => 'orientation_in_degrees',
        'angle_in_degrees' => 'angle_in_degrees'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inbound_driver' => 'setInboundDriver',
        'reference_identifier' => 'setReferenceIdentifier',
        'amount_in_cents_per_kwh' => 'setAmountInCentsPerKwh',
        'peak_in_watt' => 'setPeakInWatt',
        'p90_in_kwh' => 'setP90InKwh',
        'orientation_in_degrees' => 'setOrientationInDegrees',
        'angle_in_degrees' => 'setAngleInDegrees'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inbound_driver' => 'getInboundDriver',
        'reference_identifier' => 'getReferenceIdentifier',
        'amount_in_cents_per_kwh' => 'getAmountInCentsPerKwh',
        'peak_in_watt' => 'getPeakInWatt',
        'p90_in_kwh' => 'getP90InKwh',
        'orientation_in_degrees' => 'getOrientationInDegrees',
        'angle_in_degrees' => 'getAngleInDegrees'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('inbound_driver', $data ?? [], null);
        $this->setIfExists('reference_identifier', $data ?? [], null);
        $this->setIfExists('amount_in_cents_per_kwh', $data ?? [], null);
        $this->setIfExists('peak_in_watt', $data ?? [], null);
        $this->setIfExists('p90_in_kwh', $data ?? [], null);
        $this->setIfExists('orientation_in_degrees', $data ?? [], null);
        $this->setIfExists('angle_in_degrees', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inbound_driver'] === null) {
            $invalidProperties[] = "'inbound_driver' can't be null";
        }
        if ($this->container['reference_identifier'] === null) {
            $invalidProperties[] = "'reference_identifier' can't be null";
        }
        if (!is_null($this->container['orientation_in_degrees']) && ($this->container['orientation_in_degrees'] > 359)) {
            $invalidProperties[] = "invalid value for 'orientation_in_degrees', must be smaller than or equal to 359.";
        }

        if (!is_null($this->container['orientation_in_degrees']) && ($this->container['orientation_in_degrees'] < 0)) {
            $invalidProperties[] = "invalid value for 'orientation_in_degrees', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['angle_in_degrees']) && ($this->container['angle_in_degrees'] > 359)) {
            $invalidProperties[] = "invalid value for 'angle_in_degrees', must be smaller than or equal to 359.";
        }

        if (!is_null($this->container['angle_in_degrees']) && ($this->container['angle_in_degrees'] < 0)) {
            $invalidProperties[] = "invalid value for 'angle_in_degrees', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inbound_driver
     *
     * @return string
     */
    public function getInboundDriver()
    {
        return $this->container['inbound_driver'];
    }

    /**
     * Sets inbound_driver
     *
     * @param string $inbound_driver inbound_driver
     *
     * @return self
     */
    public function setInboundDriver($inbound_driver)
    {
        if (is_null($inbound_driver)) {
            throw new \InvalidArgumentException('non-nullable inbound_driver cannot be null');
        }
        $this->container['inbound_driver'] = $inbound_driver;

        return $this;
    }

    /**
     * Gets reference_identifier
     *
     * @return string
     */
    public function getReferenceIdentifier()
    {
        return $this->container['reference_identifier'];
    }

    /**
     * Sets reference_identifier
     *
     * @param string $reference_identifier reference_identifier
     *
     * @return self
     */
    public function setReferenceIdentifier($reference_identifier)
    {
        if (is_null($reference_identifier)) {
            throw new \InvalidArgumentException('non-nullable reference_identifier cannot be null');
        }
        $this->container['reference_identifier'] = $reference_identifier;

        return $this;
    }

    /**
     * Gets amount_in_cents_per_kwh
     *
     * @return float|null
     */
    public function getAmountInCentsPerKwh()
    {
        return $this->container['amount_in_cents_per_kwh'];
    }

    /**
     * Sets amount_in_cents_per_kwh
     *
     * @param float|null $amount_in_cents_per_kwh amount_in_cents_per_kwh
     *
     * @return self
     */
    public function setAmountInCentsPerKwh($amount_in_cents_per_kwh)
    {
        if (is_null($amount_in_cents_per_kwh)) {
            array_push($this->openAPINullablesSetToNull, 'amount_in_cents_per_kwh');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_in_cents_per_kwh', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_in_cents_per_kwh'] = $amount_in_cents_per_kwh;

        return $this;
    }

    /**
     * Gets peak_in_watt
     *
     * @return float|null
     */
    public function getPeakInWatt()
    {
        return $this->container['peak_in_watt'];
    }

    /**
     * Sets peak_in_watt
     *
     * @param float|null $peak_in_watt peak_in_watt
     *
     * @return self
     */
    public function setPeakInWatt($peak_in_watt)
    {
        if (is_null($peak_in_watt)) {
            array_push($this->openAPINullablesSetToNull, 'peak_in_watt');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('peak_in_watt', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['peak_in_watt'] = $peak_in_watt;

        return $this;
    }

    /**
     * Gets p90_in_kwh
     *
     * @return float|null
     */
    public function getP90InKwh()
    {
        return $this->container['p90_in_kwh'];
    }

    /**
     * Sets p90_in_kwh
     *
     * @param float|null $p90_in_kwh p90_in_kwh
     *
     * @return self
     */
    public function setP90InKwh($p90_in_kwh)
    {
        if (is_null($p90_in_kwh)) {
            array_push($this->openAPINullablesSetToNull, 'p90_in_kwh');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('p90_in_kwh', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['p90_in_kwh'] = $p90_in_kwh;

        return $this;
    }

    /**
     * Gets orientation_in_degrees
     *
     * @return float|null
     */
    public function getOrientationInDegrees()
    {
        return $this->container['orientation_in_degrees'];
    }

    /**
     * Sets orientation_in_degrees
     *
     * @param float|null $orientation_in_degrees orientation_in_degrees
     *
     * @return self
     */
    public function setOrientationInDegrees($orientation_in_degrees)
    {
        if (is_null($orientation_in_degrees)) {
            array_push($this->openAPINullablesSetToNull, 'orientation_in_degrees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('orientation_in_degrees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($orientation_in_degrees) && ($orientation_in_degrees > 359)) {
            throw new \InvalidArgumentException('invalid value for $orientation_in_degrees when calling CreateMeterPayload., must be smaller than or equal to 359.');
        }
        if (!is_null($orientation_in_degrees) && ($orientation_in_degrees < 0)) {
            throw new \InvalidArgumentException('invalid value for $orientation_in_degrees when calling CreateMeterPayload., must be bigger than or equal to 0.');
        }

        $this->container['orientation_in_degrees'] = $orientation_in_degrees;

        return $this;
    }

    /**
     * Gets angle_in_degrees
     *
     * @return float|null
     */
    public function getAngleInDegrees()
    {
        return $this->container['angle_in_degrees'];
    }

    /**
     * Sets angle_in_degrees
     *
     * @param float|null $angle_in_degrees angle_in_degrees
     *
     * @return self
     */
    public function setAngleInDegrees($angle_in_degrees)
    {
        if (is_null($angle_in_degrees)) {
            array_push($this->openAPINullablesSetToNull, 'angle_in_degrees');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('angle_in_degrees', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($angle_in_degrees) && ($angle_in_degrees > 359)) {
            throw new \InvalidArgumentException('invalid value for $angle_in_degrees when calling CreateMeterPayload., must be smaller than or equal to 359.');
        }
        if (!is_null($angle_in_degrees) && ($angle_in_degrees < 0)) {
            throw new \InvalidArgumentException('invalid value for $angle_in_degrees when calling CreateMeterPayload., must be bigger than or equal to 0.');
        }

        $this->container['angle_in_degrees'] = $angle_in_degrees;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


