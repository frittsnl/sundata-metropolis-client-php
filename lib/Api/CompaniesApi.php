<?php
/**
 * CompaniesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SunData API
 *
 * ### Requirements * an account with the credentials;   * e-mail address   * password ### Getting Started 1. Use the Sign-In endpoint to obtain a bearer token.   * open the 'authorize' of the swagger and paste the bearer-token here   * note: the authorization is persisted in the swagger but eventually the token will expire 2. Use the user/me/companies endpoint to find out which company_ids are associated with the account 3. Validate by using, for example, the Companies endpoint (GET)   * fill the company-id ### Upgrade guide * v1.6.0   * Adds the plant-tags endpoints, for attaching and detaching tags * v2.0.0   * Attaching tags and companies during plant creation or updating is no longer supported.     These should now be attached using the plant-tags and plant-companies endpoints.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: admin@sundata.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SunDataMetropolisClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SunDataMetropolisClient\ApiException;
use SunDataMetropolisClient\Configuration;
use SunDataMetropolisClient\HeaderSelector;
use SunDataMetropolisClient\ObjectSerializer;

/**
 * CompaniesApi Class Doc Comment
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CompaniesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCompany' => [
            'application/json',
        ],
        'getCompanyInboundDrivers' => [
            'application/json',
        ],
        'getCompanyTags' => [
            'application/json',
        ],
        'getCompanyTicket' => [
            'application/json',
        ],
        'getCompanyTickets' => [
            'application/json',
        ],
        'getCompanyVisibleInboundDrivers' => [
            'application/json',
        ],
        'getCustomFieldTypes' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCompany
     *
     * Get a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompany'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\Company
     */
    public function getCompany($company_id, string $contentType = self::contentTypes['getCompany'][0])
    {
        list($response) = $this->getCompanyWithHttpInfo($company_id, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyWithHttpInfo
     *
     * Get a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompany'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\Company, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyWithHttpInfo($company_id, string $contentType = self::contentTypes['getCompany'][0])
    {
        $request = $this->getCompanyRequest($company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\Company' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\Company' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\Company', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\Company';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\Company',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyAsync
     *
     * Get a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyAsync($company_id, string $contentType = self::contentTypes['getCompany'][0])
    {
        return $this->getCompanyAsyncWithHttpInfo($company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyAsyncWithHttpInfo
     *
     * Get a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyAsyncWithHttpInfo($company_id, string $contentType = self::contentTypes['getCompany'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\Company';
        $request = $this->getCompanyRequest($company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompany'
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompany'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyRequest($company_id, string $contentType = self::contentTypes['getCompany'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCompany'
            );
        }


        $resourcePath = '/companies/{company_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyInboundDrivers
     *
     * Get Inbound Drivers attached to company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInboundDrivers'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\InboundDriver[]
     */
    public function getCompanyInboundDrivers($company_id, string $contentType = self::contentTypes['getCompanyInboundDrivers'][0])
    {
        list($response) = $this->getCompanyInboundDriversWithHttpInfo($company_id, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyInboundDriversWithHttpInfo
     *
     * Get Inbound Drivers attached to company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInboundDrivers'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\InboundDriver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyInboundDriversWithHttpInfo($company_id, string $contentType = self::contentTypes['getCompanyInboundDrivers'][0])
    {
        $request = $this->getCompanyInboundDriversRequest($company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\InboundDriver[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\InboundDriver[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\InboundDriver[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\InboundDriver[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\InboundDriver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyInboundDriversAsync
     *
     * Get Inbound Drivers attached to company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInboundDrivers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyInboundDriversAsync($company_id, string $contentType = self::contentTypes['getCompanyInboundDrivers'][0])
    {
        return $this->getCompanyInboundDriversAsyncWithHttpInfo($company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyInboundDriversAsyncWithHttpInfo
     *
     * Get Inbound Drivers attached to company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInboundDrivers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyInboundDriversAsyncWithHttpInfo($company_id, string $contentType = self::contentTypes['getCompanyInboundDrivers'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\InboundDriver[]';
        $request = $this->getCompanyInboundDriversRequest($company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyInboundDrivers'
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyInboundDrivers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyInboundDriversRequest($company_id, string $contentType = self::contentTypes['getCompanyInboundDrivers'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCompanyInboundDrivers'
            );
        }


        $resourcePath = '/companies/{company_id}/inbound-drivers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyTags
     *
     * Get Company Tags
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTags'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\Tag[]
     */
    public function getCompanyTags($company_id, string $contentType = self::contentTypes['getCompanyTags'][0])
    {
        list($response) = $this->getCompanyTagsWithHttpInfo($company_id, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyTagsWithHttpInfo
     *
     * Get Company Tags
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTags'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\Tag[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyTagsWithHttpInfo($company_id, string $contentType = self::contentTypes['getCompanyTags'][0])
    {
        $request = $this->getCompanyTagsRequest($company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\Tag[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\Tag[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\Tag[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\Tag[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\Tag[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyTagsAsync
     *
     * Get Company Tags
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyTagsAsync($company_id, string $contentType = self::contentTypes['getCompanyTags'][0])
    {
        return $this->getCompanyTagsAsyncWithHttpInfo($company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyTagsAsyncWithHttpInfo
     *
     * Get Company Tags
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyTagsAsyncWithHttpInfo($company_id, string $contentType = self::contentTypes['getCompanyTags'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\Tag[]';
        $request = $this->getCompanyTagsRequest($company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyTags'
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyTagsRequest($company_id, string $contentType = self::contentTypes['getCompanyTags'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCompanyTags'
            );
        }


        $resourcePath = '/companies/{company_id}/tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyTicket
     *
     * Get a ticket of a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $ticket_id The id of the ticket (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTicket'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\Ticket
     */
    public function getCompanyTicket($company_id, $ticket_id, $with = null, string $contentType = self::contentTypes['getCompanyTicket'][0])
    {
        list($response) = $this->getCompanyTicketWithHttpInfo($company_id, $ticket_id, $with, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyTicketWithHttpInfo
     *
     * Get a ticket of a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $ticket_id The id of the ticket (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTicket'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyTicketWithHttpInfo($company_id, $ticket_id, $with = null, string $contentType = self::contentTypes['getCompanyTicket'][0])
    {
        $request = $this->getCompanyTicketRequest($company_id, $ticket_id, $with, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\Ticket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\Ticket' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\Ticket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\Ticket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\Ticket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyTicketAsync
     *
     * Get a ticket of a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $ticket_id The id of the ticket (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyTicketAsync($company_id, $ticket_id, $with = null, string $contentType = self::contentTypes['getCompanyTicket'][0])
    {
        return $this->getCompanyTicketAsyncWithHttpInfo($company_id, $ticket_id, $with, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyTicketAsyncWithHttpInfo
     *
     * Get a ticket of a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $ticket_id The id of the ticket (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyTicketAsyncWithHttpInfo($company_id, $ticket_id, $with = null, string $contentType = self::contentTypes['getCompanyTicket'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\Ticket';
        $request = $this->getCompanyTicketRequest($company_id, $ticket_id, $with, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyTicket'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $ticket_id The id of the ticket (required)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyTicketRequest($company_id, $ticket_id, $with = null, string $contentType = self::contentTypes['getCompanyTicket'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCompanyTicket'
            );
        }

        // verify the required parameter 'ticket_id' is set
        if ($ticket_id === null || (is_array($ticket_id) && count($ticket_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticket_id when calling getCompanyTicket'
            );
        }



        $resourcePath = '/companies/{company_id}/tickets/{ticket_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($ticket_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ticket_id' . '}',
                ObjectSerializer::toPathValue($ticket_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyTickets
     *
     * Get all tickets of a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $page page (optional)
     * @param  string $ticket_status ticket_status (optional)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTickets'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\Ticket
     */
    public function getCompanyTickets($company_id, $page = null, $ticket_status = null, $with = null, string $contentType = self::contentTypes['getCompanyTickets'][0])
    {
        list($response) = $this->getCompanyTicketsWithHttpInfo($company_id, $page, $ticket_status, $with, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyTicketsWithHttpInfo
     *
     * Get all tickets of a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $page (optional)
     * @param  string $ticket_status (optional)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTickets'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\Ticket, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyTicketsWithHttpInfo($company_id, $page = null, $ticket_status = null, $with = null, string $contentType = self::contentTypes['getCompanyTickets'][0])
    {
        $request = $this->getCompanyTicketsRequest($company_id, $page, $ticket_status, $with, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\Ticket' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\Ticket' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\Ticket', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\Ticket';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\Ticket',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyTicketsAsync
     *
     * Get all tickets of a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $page (optional)
     * @param  string $ticket_status (optional)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTickets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyTicketsAsync($company_id, $page = null, $ticket_status = null, $with = null, string $contentType = self::contentTypes['getCompanyTickets'][0])
    {
        return $this->getCompanyTicketsAsyncWithHttpInfo($company_id, $page, $ticket_status, $with, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyTicketsAsyncWithHttpInfo
     *
     * Get all tickets of a company
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $page (optional)
     * @param  string $ticket_status (optional)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTickets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyTicketsAsyncWithHttpInfo($company_id, $page = null, $ticket_status = null, $with = null, string $contentType = self::contentTypes['getCompanyTickets'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\Ticket';
        $request = $this->getCompanyTicketsRequest($company_id, $page, $ticket_status, $with, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyTickets'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $page (optional)
     * @param  string $ticket_status (optional)
     * @param  string $with May contain all or some of the following values\\: &#x60;plant&#x60;, &#x60;assignees&#x60;, &#x60;assignments&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyTickets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyTicketsRequest($company_id, $page = null, $ticket_status = null, $with = null, string $contentType = self::contentTypes['getCompanyTickets'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCompanyTickets'
            );
        }





        $resourcePath = '/companies/{company_id}/tickets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_status,
            'ticket_status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $with,
            'with', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompanyVisibleInboundDrivers
     *
     * Get Inbound Drivers visible to the company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyVisibleInboundDrivers'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\InboundDriver[]
     */
    public function getCompanyVisibleInboundDrivers($company_id, string $contentType = self::contentTypes['getCompanyVisibleInboundDrivers'][0])
    {
        list($response) = $this->getCompanyVisibleInboundDriversWithHttpInfo($company_id, $contentType);
        return $response;
    }

    /**
     * Operation getCompanyVisibleInboundDriversWithHttpInfo
     *
     * Get Inbound Drivers visible to the company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyVisibleInboundDrivers'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\InboundDriver[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompanyVisibleInboundDriversWithHttpInfo($company_id, string $contentType = self::contentTypes['getCompanyVisibleInboundDrivers'][0])
    {
        $request = $this->getCompanyVisibleInboundDriversRequest($company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\InboundDriver[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\InboundDriver[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\InboundDriver[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\InboundDriver[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\InboundDriver[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompanyVisibleInboundDriversAsync
     *
     * Get Inbound Drivers visible to the company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyVisibleInboundDrivers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyVisibleInboundDriversAsync($company_id, string $contentType = self::contentTypes['getCompanyVisibleInboundDrivers'][0])
    {
        return $this->getCompanyVisibleInboundDriversAsyncWithHttpInfo($company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompanyVisibleInboundDriversAsyncWithHttpInfo
     *
     * Get Inbound Drivers visible to the company
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyVisibleInboundDrivers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompanyVisibleInboundDriversAsyncWithHttpInfo($company_id, string $contentType = self::contentTypes['getCompanyVisibleInboundDrivers'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\InboundDriver[]';
        $request = $this->getCompanyVisibleInboundDriversRequest($company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompanyVisibleInboundDrivers'
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompanyVisibleInboundDrivers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompanyVisibleInboundDriversRequest($company_id, string $contentType = self::contentTypes['getCompanyVisibleInboundDrivers'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCompanyVisibleInboundDrivers'
            );
        }


        $resourcePath = '/companies/{company_id}/visible-inbound-drivers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomFieldTypes
     *
     * Get Company Custom Field types
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomFieldTypes'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\CustomFieldType[]
     */
    public function getCustomFieldTypes($company_id, string $contentType = self::contentTypes['getCustomFieldTypes'][0])
    {
        list($response) = $this->getCustomFieldTypesWithHttpInfo($company_id, $contentType);
        return $response;
    }

    /**
     * Operation getCustomFieldTypesWithHttpInfo
     *
     * Get Company Custom Field types
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomFieldTypes'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\CustomFieldType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomFieldTypesWithHttpInfo($company_id, string $contentType = self::contentTypes['getCustomFieldTypes'][0])
    {
        $request = $this->getCustomFieldTypesRequest($company_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\CustomFieldType[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\CustomFieldType[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\CustomFieldType[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\CustomFieldType[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\CustomFieldType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomFieldTypesAsync
     *
     * Get Company Custom Field types
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomFieldTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomFieldTypesAsync($company_id, string $contentType = self::contentTypes['getCustomFieldTypes'][0])
    {
        return $this->getCustomFieldTypesAsyncWithHttpInfo($company_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomFieldTypesAsyncWithHttpInfo
     *
     * Get Company Custom Field types
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomFieldTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomFieldTypesAsyncWithHttpInfo($company_id, string $contentType = self::contentTypes['getCustomFieldTypes'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\CustomFieldType[]';
        $request = $this->getCustomFieldTypesRequest($company_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomFieldTypes'
     *
     * @param  int $company_id The id of the company (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCustomFieldTypes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomFieldTypesRequest($company_id, string $contentType = self::contentTypes['getCustomFieldTypes'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getCustomFieldTypes'
            );
        }


        $resourcePath = '/companies/{company_id}/plant-custom-field-types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
