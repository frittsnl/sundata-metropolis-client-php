<?php
/**
 * CustomFieldsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SunData API
 *
 * ### Requirements * an account with the credentials;   * e-mail address   * password ### Getting Started 1. Use the Sign-In endpoint to obtain a bearer token.   * open the 'authorize' of the swagger and paste the bearer-token here   * note: the authorization is persisted in the swagger but eventually the token will expire 2. Use the user/me/companies endpoint to find out which company_ids are associated with the account 3. Validate by using, for example, the Companies endpoint (GET)   * fill the company-id ### Upgrade guide * v1.6.0   * Adds the plant-tags endpoints, for attaching and detaching tags * v2.0.0   * Attaching tags and companies during plant creation or updating is no longer supported.     These should now be attached using the plant-tags and plant-companies endpoints.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: admin@sundata.nl
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace SunDataMetropolisClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use SunDataMetropolisClient\ApiException;
use SunDataMetropolisClient\Configuration;
use SunDataMetropolisClient\HeaderSelector;
use SunDataMetropolisClient\ObjectSerializer;

/**
 * CustomFieldsApi Class Doc Comment
 *
 * @category Class
 * @package  SunDataMetropolisClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomFieldsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createPlantCustomFields' => [
            'application/json',
        ],
        'deletePlantCustomField' => [
            'application/json',
        ],
        'getPlantCustomField' => [
            'application/json',
        ],
        'getPlantCustomFields' => [
            'application/json',
        ],
        'updatePlantCustomField' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPlantCustomFields
     *
     * Create Plant Custom Fields
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldCreatePayload $custom_field_create_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\CustomFieldResponse
     */
    public function createPlantCustomFields($company_id, $plant_id, $custom_field_create_payload = null, string $contentType = self::contentTypes['createPlantCustomFields'][0])
    {
        list($response) = $this->createPlantCustomFieldsWithHttpInfo($company_id, $plant_id, $custom_field_create_payload, $contentType);
        return $response;
    }

    /**
     * Operation createPlantCustomFieldsWithHttpInfo
     *
     * Create Plant Custom Fields
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldCreatePayload $custom_field_create_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\CustomFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPlantCustomFieldsWithHttpInfo($company_id, $plant_id, $custom_field_create_payload = null, string $contentType = self::contentTypes['createPlantCustomFields'][0])
    {
        $request = $this->createPlantCustomFieldsRequest($company_id, $plant_id, $custom_field_create_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\CustomFieldResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\CustomFieldResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\CustomFieldResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\CustomFieldResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\CustomFieldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPlantCustomFieldsAsync
     *
     * Create Plant Custom Fields
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldCreatePayload $custom_field_create_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlantCustomFieldsAsync($company_id, $plant_id, $custom_field_create_payload = null, string $contentType = self::contentTypes['createPlantCustomFields'][0])
    {
        return $this->createPlantCustomFieldsAsyncWithHttpInfo($company_id, $plant_id, $custom_field_create_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPlantCustomFieldsAsyncWithHttpInfo
     *
     * Create Plant Custom Fields
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldCreatePayload $custom_field_create_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPlantCustomFieldsAsyncWithHttpInfo($company_id, $plant_id, $custom_field_create_payload = null, string $contentType = self::contentTypes['createPlantCustomFields'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\CustomFieldResponse';
        $request = $this->createPlantCustomFieldsRequest($company_id, $plant_id, $custom_field_create_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPlantCustomFields'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldCreatePayload $custom_field_create_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPlantCustomFieldsRequest($company_id, $plant_id, $custom_field_create_payload = null, string $contentType = self::contentTypes['createPlantCustomFields'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling createPlantCustomFields'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling createPlantCustomFields'
            );
        }



        $resourcePath = '/companies/{company_id}/plants/{plant_id}/custom-fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($custom_field_create_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($custom_field_create_payload));
            } else {
                $httpBody = $custom_field_create_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePlantCustomField
     *
     * Delete plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePlantCustomField'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function deletePlantCustomField($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['deletePlantCustomField'][0])
    {
        list($response) = $this->deletePlantCustomFieldWithHttpInfo($company_id, $plant_id, $custom_field_id, $contentType);
        return $response;
    }

    /**
     * Operation deletePlantCustomFieldWithHttpInfo
     *
     * Delete plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePlantCustomField'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePlantCustomFieldWithHttpInfo($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['deletePlantCustomField'][0])
    {
        $request = $this->deletePlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePlantCustomFieldAsync
     *
     * Delete plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePlantCustomFieldAsync($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['deletePlantCustomField'][0])
    {
        return $this->deletePlantCustomFieldAsyncWithHttpInfo($company_id, $plant_id, $custom_field_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePlantCustomFieldAsyncWithHttpInfo
     *
     * Delete plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePlantCustomFieldAsyncWithHttpInfo($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['deletePlantCustomField'][0])
    {
        $returnType = 'string[]';
        $request = $this->deletePlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePlantCustomField'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['deletePlantCustomField'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling deletePlantCustomField'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling deletePlantCustomField'
            );
        }

        // verify the required parameter 'custom_field_id' is set
        if ($custom_field_id === null || (is_array($custom_field_id) && count($custom_field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_field_id when calling deletePlantCustomField'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/custom-fields/{custom_field_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }
        // path params
        if ($custom_field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_field_id' . '}',
                ObjectSerializer::toPathValue($custom_field_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlantCustomField
     *
     * Get a plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomField'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\CustomFieldResponse
     */
    public function getPlantCustomField($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['getPlantCustomField'][0])
    {
        list($response) = $this->getPlantCustomFieldWithHttpInfo($company_id, $plant_id, $custom_field_id, $contentType);
        return $response;
    }

    /**
     * Operation getPlantCustomFieldWithHttpInfo
     *
     * Get a plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomField'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\CustomFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlantCustomFieldWithHttpInfo($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['getPlantCustomField'][0])
    {
        $request = $this->getPlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\CustomFieldResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\CustomFieldResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\CustomFieldResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\CustomFieldResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\CustomFieldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlantCustomFieldAsync
     *
     * Get a plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantCustomFieldAsync($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['getPlantCustomField'][0])
    {
        return $this->getPlantCustomFieldAsyncWithHttpInfo($company_id, $plant_id, $custom_field_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlantCustomFieldAsyncWithHttpInfo
     *
     * Get a plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantCustomFieldAsyncWithHttpInfo($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['getPlantCustomField'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\CustomFieldResponse';
        $request = $this->getPlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlantCustomField'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, string $contentType = self::contentTypes['getPlantCustomField'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPlantCustomField'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling getPlantCustomField'
            );
        }

        // verify the required parameter 'custom_field_id' is set
        if ($custom_field_id === null || (is_array($custom_field_id) && count($custom_field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_field_id when calling getPlantCustomField'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/custom-fields/{custom_field_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }
        // path params
        if ($custom_field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_field_id' . '}',
                ObjectSerializer::toPathValue($custom_field_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlantCustomFields
     *
     * Get Plant Custom Fields
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\CustomFieldResponse[]
     */
    public function getPlantCustomFields($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCustomFields'][0])
    {
        list($response) = $this->getPlantCustomFieldsWithHttpInfo($company_id, $plant_id, $contentType);
        return $response;
    }

    /**
     * Operation getPlantCustomFieldsWithHttpInfo
     *
     * Get Plant Custom Fields
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\CustomFieldResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlantCustomFieldsWithHttpInfo($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCustomFields'][0])
    {
        $request = $this->getPlantCustomFieldsRequest($company_id, $plant_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\CustomFieldResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\CustomFieldResponse[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\CustomFieldResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\CustomFieldResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\CustomFieldResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlantCustomFieldsAsync
     *
     * Get Plant Custom Fields
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantCustomFieldsAsync($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCustomFields'][0])
    {
        return $this->getPlantCustomFieldsAsyncWithHttpInfo($company_id, $plant_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlantCustomFieldsAsyncWithHttpInfo
     *
     * Get Plant Custom Fields
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlantCustomFieldsAsyncWithHttpInfo($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCustomFields'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\CustomFieldResponse[]';
        $request = $this->getPlantCustomFieldsRequest($company_id, $plant_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlantCustomFields'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPlantCustomFields'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPlantCustomFieldsRequest($company_id, $plant_id, string $contentType = self::contentTypes['getPlantCustomFields'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling getPlantCustomFields'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling getPlantCustomFields'
            );
        }


        $resourcePath = '/companies/{company_id}/plants/{plant_id}/custom-fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePlantCustomField
     *
     * Update plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldUpdatePayload $custom_field_update_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlantCustomField'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SunDataMetropolisClient\Model\CustomFieldResponse
     */
    public function updatePlantCustomField($company_id, $plant_id, $custom_field_id, $custom_field_update_payload = null, string $contentType = self::contentTypes['updatePlantCustomField'][0])
    {
        list($response) = $this->updatePlantCustomFieldWithHttpInfo($company_id, $plant_id, $custom_field_id, $custom_field_update_payload, $contentType);
        return $response;
    }

    /**
     * Operation updatePlantCustomFieldWithHttpInfo
     *
     * Update plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldUpdatePayload $custom_field_update_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlantCustomField'] to see the possible values for this operation
     *
     * @throws \SunDataMetropolisClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SunDataMetropolisClient\Model\CustomFieldResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePlantCustomFieldWithHttpInfo($company_id, $plant_id, $custom_field_id, $custom_field_update_payload = null, string $contentType = self::contentTypes['updatePlantCustomField'][0])
    {
        $request = $this->updatePlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, $custom_field_update_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SunDataMetropolisClient\Model\CustomFieldResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SunDataMetropolisClient\Model\CustomFieldResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SunDataMetropolisClient\Model\CustomFieldResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SunDataMetropolisClient\Model\CustomFieldResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SunDataMetropolisClient\Model\CustomFieldResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePlantCustomFieldAsync
     *
     * Update plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldUpdatePayload $custom_field_update_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlantCustomFieldAsync($company_id, $plant_id, $custom_field_id, $custom_field_update_payload = null, string $contentType = self::contentTypes['updatePlantCustomField'][0])
    {
        return $this->updatePlantCustomFieldAsyncWithHttpInfo($company_id, $plant_id, $custom_field_id, $custom_field_update_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePlantCustomFieldAsyncWithHttpInfo
     *
     * Update plant custom field
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldUpdatePayload $custom_field_update_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlantCustomFieldAsyncWithHttpInfo($company_id, $plant_id, $custom_field_id, $custom_field_update_payload = null, string $contentType = self::contentTypes['updatePlantCustomField'][0])
    {
        $returnType = '\SunDataMetropolisClient\Model\CustomFieldResponse';
        $request = $this->updatePlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, $custom_field_update_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePlantCustomField'
     *
     * @param  int $company_id The id of the company (required)
     * @param  int $plant_id The id of the plant (required)
     * @param  int $custom_field_id The id of the custom field (required)
     * @param  \SunDataMetropolisClient\Model\CustomFieldUpdatePayload $custom_field_update_payload  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePlantCustomField'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePlantCustomFieldRequest($company_id, $plant_id, $custom_field_id, $custom_field_update_payload = null, string $contentType = self::contentTypes['updatePlantCustomField'][0])
    {

        // verify the required parameter 'company_id' is set
        if ($company_id === null || (is_array($company_id) && count($company_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling updatePlantCustomField'
            );
        }

        // verify the required parameter 'plant_id' is set
        if ($plant_id === null || (is_array($plant_id) && count($plant_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plant_id when calling updatePlantCustomField'
            );
        }

        // verify the required parameter 'custom_field_id' is set
        if ($custom_field_id === null || (is_array($custom_field_id) && count($custom_field_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_field_id when calling updatePlantCustomField'
            );
        }



        $resourcePath = '/companies/{company_id}/plants/{plant_id}/custom-fields/{custom_field_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'company_id' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($plant_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plant_id' . '}',
                ObjectSerializer::toPathValue($plant_id),
                $resourcePath
            );
        }
        // path params
        if ($custom_field_id !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_field_id' . '}',
                ObjectSerializer::toPathValue($custom_field_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($custom_field_update_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($custom_field_update_payload));
            } else {
                $httpBody = $custom_field_update_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
